<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HZG</title>
  <subtitle>熬过苦B的日子，你就是牛B的人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-15T12:09:47.986Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>HZXB</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Scrapy</title>
    <link href="http://yoursite.com/2016/08/15/scrapy%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2016/08/15/scrapy框架/</id>
    <published>2016-08-15T11:47:14.917Z</published>
    <updated>2016-08-15T12:09:47.986Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h3><p>Scrapy是python开发的一个web爬虫抓取框架，可以用于数据挖掘，信息处理或者存储历史数据等一系列程序中。</p>
<h3 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h3><p>安装python2.7，在系统环境变量path中添加python路径和python目录下Scripts目录。完成后在cmd中输入python，若能看到python版本信息则配置完成。</p>
<h3 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h3><p>下载pip的安装包进行解压，执行python setup.py install进行安装。</p>
<h3 id="安装lxml"><a href="#安装lxml" class="headerlink" title="安装lxml"></a>安装lxml</h3><p>lxml是一种使用python编写的库，可以灵活的处理xml，执行 pip install lxml进行安装。输入import lxml进行验证。</p>
<h3 id="安装zope-interface"><a href="#安装zope-interface" class="headerlink" title="安装zope.interface"></a>安装zope.interface</h3><p>执行 pip install zope.interface。</p>
<h3 id="安装Twisted"><a href="#安装Twisted" class="headerlink" title="安装Twisted"></a>安装Twisted</h3><p>Twisted是用python实行的基于事件驱动的网络引擎框架，执行 pip install Twisted。</p>
<h3 id="安装pyOpenSSL"><a href="#安装pyOpenSSL" class="headerlink" title="安装pyOpenSSL"></a>安装pyOpenSSL</h3><p>执行 pip install pyOpenSSL。</p>
<h3 id="安装win32py"><a href="#安装win32py" class="headerlink" title="安装win32py"></a>安装win32py</h3><p>下载win32py,点击安装。</p>
<h3 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h3><p>执行pip install Scrapy,输入scrapy进行验证。</p>
<h3 id="scrapy的简单爬取"><a href="#scrapy的简单爬取" class="headerlink" title="scrapy的简单爬取"></a>scrapy的简单爬取</h3><p>在scrapy items中定义所要抓取的数据；编写一个spider提取数据，定义一个url，使用xpath从页面的html源码中选择需要提取的数据，观察html页面源码创建我们需要的数据的xpath表达式，执行spider，获取数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Scrapy&quot;&gt;&lt;a href=&quot;#Scrapy&quot; class=&quot;headerlink&quot; title=&quot;Scrapy&quot;&gt;&lt;/a&gt;Scrapy&lt;/h3&gt;&lt;p&gt;Scrapy是python开发的一个web爬虫抓取框架，可以用于数据挖掘，信息处理或者存储历史数据等一系列程
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客之旅</title>
    <link href="http://yoursite.com/2016/08/07/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/08/07/正则表达式/</id>
    <published>2016-08-07T12:05:14.003Z</published>
    <updated>2016-07-24T07:18:08.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言碎语"><a href="#前言碎语" class="headerlink" title="前言碎语"></a>前言碎语</h3><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! 看到这句话，内心还是有点波澜的，在自己打开这满是英文界面的一脸懵，到在小宇哥，松哥的帮助下逐步搞懂实属不易，接下来正式开始自己的博客之旅。</p>
<h3 id="博客之旅"><a href="#博客之旅" class="headerlink" title="博客之旅"></a>博客之旅</h3><p>第一篇博客还是想回忆下自己的这两年学习生活，只在要写东西时有感而发。14年的夏天自己在惊讶中拿到了大学的录取通知书，收拾好自己的行囊来到了滁州学院，走进了自己的大学世界。尽管自己对大学一无所知，但还是展现出一份无所谓，宠辱不惊的心态独自来到了学校。也许正是这份故作深沉让旁人认为的所谓的成熟使自己完全没有一种大一新生的感觉。大学自己当了班长，两年中因为这个自己牺牲了很多个人的时间，但正是这个使自己学到了很多，让自己有过担当，学会承担，学会与人沟通。使那易怒的脾气渐渐平静。大一的时光在不停的忙碌在班级事务，社团活动，热衷于那一个又一个似乎“必不可缺”的学生会议中。大一的暑假给了自己一个规划，又是好好学习又是怎么样，然后到了大二又很自然的担任了GIS协会的负责人，然后又在忙着班级和社团的事情，感觉自己不是一个gis的学生，有了一种管理类专业的感觉。尽管这与自己所想的大学并不吻合，但自己的选择并不后悔。<br>大二的某个阶段突然感觉自己要加强专业技能的学习，加入了众源聚合的大家庭，在这里让自己的感受到了自己的差劲，对自己下定决心要好好学一些技能，在每一个任务布置下来自己那摸索，抓耳挠腮，最终用老师的话”啃哧啃哧”的完成。转眼间来到了大二的暑假，开始了六个月的实习。第一个任务是在Github上写博客，在搞了几天的情况下终于可以顺利写出来，第一篇博客由此产生，只为记忆。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言碎语&quot;&gt;&lt;a href=&quot;#前言碎语&quot; class=&quot;headerlink&quot; title=&quot;前言碎语&quot;&gt;&lt;/a&gt;前言碎语&lt;/h3&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python爬虫</title>
    <link href="http://yoursite.com/2016/08/07/python%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2016/08/07/python爬虫/</id>
    <published>2016-08-07T11:29:03.916Z</published>
    <updated>2016-08-07T12:01:07.083Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫简介"><a href="#爬虫简介" class="headerlink" title="爬虫简介"></a>爬虫简介</h3><p>爬虫是一段自动抓取互联网信息的程序，爬虫可以从一个url出发，自动访问所有相关联的url，获取所需要的数据。</p>
<h3 id="简单的爬虫建构"><a href="#简单的爬虫建构" class="headerlink" title="简单的爬虫建构"></a>简单的爬虫建构</h3><p>爬虫调度端 –&gt;爬虫（url管理器-&gt;网页下载器-&gt;网页解析器-&gt;url管理器（循环））–&gt;价值数据</p>
<h3 id="url管理器"><a href="#url管理器" class="headerlink" title="url管理器"></a>url管理器</h3><p>管理待抓取的url集合和已抓取的url集合，防止重复抓取和循环抓取。将一个新的url添加到爬取集合中，判断待添加的是否是在容器中。判断是否还有待爬取的url，获取待爬取的url，将待爬取的url移动到已爬取中。</p>
<p>######实现方式<br>内存： python内存将url集合存储在set()中；关系数据库：创建一个mysql，urls(url,is_crawled);缓存数据库：redis，将url集合存储在set中。</p>
<h3 id="网页下载器"><a href="#网页下载器" class="headerlink" title="网页下载器"></a>网页下载器</h3><p>将互联网中的url对应的网页下载到本地的工具。<br>python网页下载器：urllib2、requets</p>
<h3 id="网页解析器"><a href="#网页解析器" class="headerlink" title="网页解析器"></a>网页解析器</h3><p>从网页中提取有价值数据的工具</p>
<p>######模糊匹配：正则表达式</p>
<p>######结构化解析：html.parser、beautiful soup、lxml</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;爬虫简介&quot;&gt;&lt;a href=&quot;#爬虫简介&quot; class=&quot;headerlink&quot; title=&quot;爬虫简介&quot;&gt;&lt;/a&gt;爬虫简介&lt;/h3&gt;&lt;p&gt;爬虫是一段自动抓取互联网信息的程序，爬虫可以从一个url出发，自动访问所有相关联的url，获取所需要的数据。&lt;/p&gt;
&lt;h3
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python函数</title>
    <link href="http://yoursite.com/2016/07/31/python%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/07/31/python函数/</id>
    <published>2016-07-31T13:13:24.323Z</published>
    <updated>2016-07-31T13:30:44.017Z</updated>
    
    <content type="html"><![CDATA[<p>###函数<br>函数是组织好的，可重复使用，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复使用率。</p>
<p>####调用函数<br>要调用一个函数，需要知道函数的名称和参数，可以直接从Python的官方网站查看文档：<a href="http://docs.python.org/2/library/functions.html#abs，也可以在交互命令行通过help（）查看函数的帮助信息。" target="_blank" rel="external">http://docs.python.org/2/library/functions.html#abs，也可以在交互命令行通过help（）查看函数的帮助信息。</a></p>
<p>####定义函数<br>  定义函数在python中，定义一个函数要使用def语句，以此写出函数名、括号、括号中的参数和冒号，然后，在缩进快中编写函数体，函数的返回值用return语句返回。</p>
<p>####函数的参数<br>函数的参数定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了，对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。python的函数定义出来的接口不当能处理复杂的参数，还可以简化调用者代码。</p>
<p>####递归函数<br>递归函数是指在一个函数在内部调用自身本身。 递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。 使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。使用递归函数的优点是逻辑简单清晰，缺点 是过深的调用会导致栈溢出。python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###函数&lt;br&gt;函数是组织好的，可重复使用，用来实现单一，或相关联功能的代码段。函数能提高应用的模块性，和代码的重复使用率。&lt;/p&gt;
&lt;p&gt;####调用函数&lt;br&gt;要调用一个函数，需要知道函数的名称和参数，可以直接从Python的官方网站查看文档：&lt;a href=&quot;htt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="http://yoursite.com/2016/07/31/python%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/07/31/python基础/</id>
    <published>2016-07-31T10:44:36.071Z</published>
    <updated>2016-07-31T13:07:42.524Z</updated>
    
    <content type="html"><![CDATA[<p>###python基础</p>
<p>####1、使用list和tuple</p>
<p>######list是一种有序的集合，可以随时添加和删除其中的元素。使用len()函数可以获取list元素的个数；用索引来访问list中的每一个位置的元素，索引是从0开始当索引超出了范围时，python就会包indexError错误，要确保索引不要越界记得最后一个元素的索引是len(classmates)-1。同时list是一个可变的有序表，可以往list中追加元素至末尾。另可用索引号将元素插到指定的位置，用pop()可删除末尾的元素，可用pop(i)删除指定位置的元素。list里面可以有不同的数据类型，也可以有另一个list。</p>
<p>######tuple是一种有序列表，被称为元祖，tuple相对于list，其一旦初始化就不能修改，这保证了代码的安全性。</p>
<p>####2、使用dict和set</p>
<p>######dict具有查找速度快的优势，其实现原理和查字典一样，给定一个名字，dict在内部就可以计算出奇对应的存放“页码”，直接提取出来。使用key-value存储方式，在放进去时就必须根据key算出value的存放位置，这样在取得时候才能根据key直接拿到value。<br>注：dict和list相比查找和插入速度更快，不会随着key的增加而增加；需要占用大量内存，内存浪费多，dict是用控件换时间的一种方法。</p>
<p>######set是一组key的集合，但不存储value。set可以看成是数学意义上的无序和无重复元素的集合，因此两个set可以做数学意义上的交集、并集等操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###python基础&lt;/p&gt;
&lt;p&gt;####1、使用list和tuple&lt;/p&gt;
&lt;p&gt;######list是一种有序的集合，可以随时添加和删除其中的元素。使用len()函数可以获取list元素的个数；用索引来访问list中的每一个位置的元素，索引是从0开始当索引超出了范
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识python</title>
    <link href="http://yoursite.com/2016/07/24/python%E5%88%9D%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2016/07/24/python初认识/</id>
    <published>2016-07-24T08:38:25.326Z</published>
    <updated>2016-07-24T13:20:57.027Z</updated>
    
    <content type="html"><![CDATA[<p>对于python，在第一次接触后感觉较其它语言，更加通俗易懂，更容易上手，对于小白来说，python可以更加容易的理解语言，它相比其它语言经常使用英文关键字。</p>
<h3 id="python特点"><a href="#python特点" class="headerlink" title="python特点"></a>python特点</h3><p>python易于学习，代码读起来较为清晰，python拥有一个较为丰富的库，跨平台且兼容性较好。（因使用还不够深入，因此对于其了解还不是太深刻）</p>
<h3 id="python的标识符"><a href="#python的标识符" class="headerlink" title="python的标识符"></a>python的标识符</h3><p>python的标识符有字母、数字、下划线组成<br>python所有标识符可以包括英文、数字和下划线，但不能以数字开头<br>python标识符区分大小写</p>
<h3 id="python的行与缩进"><a href="#python的行与缩进" class="headerlink" title="python的行与缩进"></a>python的行与缩进</h3><p>学习python与其他语言最大区别是：python的代码块不使用大括号来控制类，函数以及其他逻辑判断。<br>缩进的空白数量是可变的，但所有代码块语句必须包含相同的缩进空白数量，这个是必须严格执行的。</p>
<h3 id="python的标准数据类型"><a href="#python的标准数据类型" class="headerlink" title="python的标准数据类型"></a>python的标准数据类型</h3><p>在python中有五个标准的数据类型：Numbers(数字)、String(字符串)、List(列表)、Tuple（元组）、Dictionary（字典）</p>
<h3 id="python语句学习"><a href="#python语句学习" class="headerlink" title="python语句学习"></a>python语句学习</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><p>Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。<br>Python程序语言指定任何非0和非空（null）值为true，0 或者 null为false。<br>if 语句的判断条件可以用&gt;（大于）、&lt;(小于)、==（等于）、&gt;=（大于等于）、&lt;=（小于等于）来表示其关系。<br>当if有多个条件时可使用括号来区分判断的先后顺序，括号中的判断优先执行，此外 and 和 or 的优先级低于&gt;（大于）、&lt;（小于）等判断符号，即大于和小于在没有括号的情况下会比与或要优先判断。</p>
<h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>python提供了for和while两种循环<br>while循环：执行语句可以是单个语句或语句块。判断条件可以是任何表达式，任何非零、或非空（null）的值均为true，当判断条件假false时，循环结束。此外while 语句时还有另外两个重要的命令 continue，break 来跳过循环，continue 用于跳过该次循环，break 则是用于退出循环<br>for循环：for循环可以遍历任何序列的项目，如一个列表或者一个字符串。</p>
<p>###总结<br>初学python，只窥其一角，任重而道远，仍需努力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于python，在第一次接触后感觉较其它语言，更加通俗易懂，更容易上手，对于小白来说，python可以更加容易的理解语言，它相比其它语言经常使用英文关键字。&lt;/p&gt;
&lt;h3 id=&quot;python特点&quot;&gt;&lt;a href=&quot;#python特点&quot; class=&quot;headerli
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>博客之旅</title>
    <link href="http://yoursite.com/2016/07/24/%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
    <id>http://yoursite.com/2016/07/24/博客之旅/</id>
    <published>2016-07-24T01:53:46.864Z</published>
    <updated>2016-07-24T07:18:08.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言碎语"><a href="#前言碎语" class="headerlink" title="前言碎语"></a>前言碎语</h3><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! 看到这句话，内心还是有点波澜的，在自己打开这满是英文界面的一脸懵，到在小宇哥，松哥的帮助下逐步搞懂实属不易，接下来正式开始自己的博客之旅。</p>
<h3 id="博客之旅"><a href="#博客之旅" class="headerlink" title="博客之旅"></a>博客之旅</h3><p>第一篇博客还是想回忆下自己的这两年学习生活，只在要写东西时有感而发。14年的夏天自己在惊讶中拿到了大学的录取通知书，收拾好自己的行囊来到了滁州学院，走进了自己的大学世界。尽管自己对大学一无所知，但还是展现出一份无所谓，宠辱不惊的心态独自来到了学校。也许正是这份故作深沉让旁人认为的所谓的成熟使自己完全没有一种大一新生的感觉。大学自己当了班长，两年中因为这个自己牺牲了很多个人的时间，但正是这个使自己学到了很多，让自己有过担当，学会承担，学会与人沟通。使那易怒的脾气渐渐平静。大一的时光在不停的忙碌在班级事务，社团活动，热衷于那一个又一个似乎“必不可缺”的学生会议中。大一的暑假给了自己一个规划，又是好好学习又是怎么样，然后到了大二又很自然的担任了GIS协会的负责人，然后又在忙着班级和社团的事情，感觉自己不是一个gis的学生，有了一种管理类专业的感觉。尽管这与自己所想的大学并不吻合，但自己的选择并不后悔。<br>大二的某个阶段突然感觉自己要加强专业技能的学习，加入了众源聚合的大家庭，在这里让自己的感受到了自己的差劲，对自己下定决心要好好学一些技能，在每一个任务布置下来自己那摸索，抓耳挠腮，最终用老师的话”啃哧啃哧”的完成。转眼间来到了大二的暑假，开始了六个月的实习。第一个任务是在Github上写博客，在搞了几天的情况下终于可以顺利写出来，第一篇博客由此产生，只为记忆。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言碎语&quot;&gt;&lt;a href=&quot;#前言碎语&quot; class=&quot;headerlink&quot; title=&quot;前言碎语&quot;&gt;&lt;/a&gt;前言碎语&lt;/h3&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
    
  </entry>
  
</feed>
